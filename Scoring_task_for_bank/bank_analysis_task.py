# -*- coding: utf-8 -*-
"""Bank_analysis_task

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iIXMJd88SAPeBbsnXZXZD8FoCdcXSkSt

**Description of the data—Ö**

Each client is characterized by the following set of data:

|Feature | Feature Description |
|---:|:---|
|`userid`|User Identifier|
|`score`|Credit scoring points|
|`Gender`|Gender|
|`Age`|Age|
|`Objects`|Number of properties owned|
|`Balance`|Account balance|
|`Products`|Number of products used by the client|
|`estimated_salary`|Client's salary|

# Descriptive statistics
"""

import pandas as pd
import numpy as np
import datetime as dt
import seaborn as sns
import matplotlib.pyplot as plt

"""Reassigning the dataframe to a new one to avoid altering the original"""

df = pd.read_csv('task_bank_scor_dataset.csv')
bank_df=df
bank_df

"""# Preprocessing

Checking the amount of missing data
"""

bank_df.info()

bank_df.columns

"""We will replace missing data with zero, as the balance can be zero."""

bank_df = bank_df.fillna(0)

bank_df

bank_df.describe()

"""Checking for duplicates"""

bank_df.duplicated().sum()

"""
Viewing unique values of a categorical feature"""

for col in bank_df.select_dtypes('object'):
  print(bank_df[col].unique())

"""We replace headers (convert to lowercase)"""

bank_df.columns = bank_df.columns.str.lower()
bank_df.columns

"""
Removing UserID"""

bank_df.drop(columns = ['userid']).duplicated().sum()

"""# Split the features into two groups: categorical and continuous.
-  categorical  'products','objects','gender'
'userid'
- continuous'score', 'age', 'balance','estimated_salary'


"""

var_cont = ['score','age','balance','estimated_salary']
var_typ = ['products','objects','gender' ]

"""Checking anomalies for age - there are no clients under 18 years old"""

bank_df.age.unique()

bank_df.age.value_counts()

"""# For each of the continuous features:
Display a boxplot and density plot for continuous features. [ 'score' , 'age' , 'balance' , 'estimated_salary' ]
-Vertical lines corresponding to the calculated statistics are plotted. The figure is equipped with a legend.
-Density distribution and histogram are plotted.
-Density distribution and vertical lines for statistics are combined on one plot.

"""

dict_rus = {'score':'Credit scoring points',
            'age':'Age',
            'balance': 'Account balance',
            'estimated_salary': 'Salary'}

fig, ax = plt.subplots(4, figsize = (18, 27))

for index, col in enumerate(var_cont):
  plt.subplot(4, 2, 2*index + 1)
  ax = sns.boxplot(data = bank_df , y = col, color= 'pink')
  ax.set_xlabel(dict_rus[col], fontsize = 15)

  ax.set_ylabel('Feature values  <<{}>>'.format(dict_rus[col]),fontsize = 15)
  plt.title('Boxplot for the feature  <<{}>>'.format(dict_rus[col], fontsize = 15))

  plt.subplot(4, 2, 2*index + 2 )
  ax = sns.distplot(bank_df[col],color= 'yellow')
  ax.set_xlabel(dict_rus[col],fontsize = 15)
  ax.set_ylabel('Density',fontsize = 15)
  plt.title('Feature distribution density<<{}>>'.format(dict_rus[col],fontsize = 15))

"""# Please specify which feature you would like the distribution density plotted for."""

sns.pairplot(bank_df[var_cont])

"""# Calculate sample mean, median, mode, quartiles (0.01, 0.05, 0.95, 0.99), lower and upper whiskers values for each of the features
- mean: sample mean
- std: standard deviation (characterizes dispersion)
- 1%, 5%, 95%, 99%: percentiles
- median: 50% percentile




"""

percentiles= [0.01,0.05, 0.95, 0.99]
bank_df[var_cont].describe(percentiles=percentiles)

"""# 'score'"""

def calc_boxplot(bank_df:pd.Series) -> tuple:
    Q1, median, Q3 = np.percentile(np.asarray(bank_df.dropna()), [25, 50, 75])
    IQR = Q3 - Q1
    loval = Q1 - 1.5 * IQR
    hival = Q3 + 1.5 * IQR
    wiskhi = np.compress(np.asarray(bank_df) <= hival, np.asarray(bank_df))
    wisklo = np.compress(np.asarray(bank_df) >= loval, np.asarray(bank_df))
    actual_hival = np.max(wiskhi)
    actual_loval = np.min(wisklo)
    return actual_loval, actual_hival #(lower/upper wh)

fig, ax = plt.subplots(1, figsize = (18, 6))
plt.subplot(1,2,1)
ax = sns.boxplot(y = bank_df['score']);
ax.set_xlabel(dict_rus['score'], fontsize = 12)
ax.set_ylabel('Feature values \n <<{}>>'.format(dict_rus['score']), fontsize = 12)
plt.title('Boxplot \n For the feature <<{}>>'.format(dict_rus['score']))
plt.subplot(1,2,2)
ax = sns.distplot(x = bank_df[bank_df['score'] < 1000].score,
                  bins = 100,
                  kde = False);
ax.axvline(np.percentile(bank_df['score'].dropna(), 1),
           color = 'red',
           label = 'percentile 1 -- {}'.format(np.round(np.percentile(bank_df['score'].dropna(), 1), 2)))
ax.axvline(np.percentile(bank_df['score'].dropna(), 5),
           color = 'blue',
           label = 'percentile  5 -- {}'.format(np.round(np.percentile(bank_df['score'].dropna(), 5), 2)))
ax.axvline(np.percentile(bank_df['score'].dropna(), 1),
           color = 'yellow',
           label = 'percentile 95 -- {}'.format(np.round(np.percentile(bank_df['score'].dropna(), 95), 2)))
ax.axvline(np.percentile(bank_df['score'].dropna(), 99),
           color = 'green',
           label = 'percentile 99 -- {}'.format(np.round(np.percentile(bank_df['score'].dropna(), 99), 2)))

ax.axvline(calc_boxplot(bank_df['score'])[0],
           color = 'orange',
           label = 'Lower wh. -- {}'.format(np.round(calc_boxplot(bank_df['score'])[0], 2))
           )
ax.axvline(calc_boxplot(bank_df['score'])[1],
           color ='red',
           label = 'Upper wh -- {}'.format(np.round(calc_boxplot(bank_df['score'])[1], 2))
           )
ax.axvline(bank_df['score'].mean(),
           color ='black',
           label = 'Mean-- {}'.format(np.round(bank_df['score']).mean(), 2))
ax.axvline(bank_df['score'].median(),
           color ='brown',
           label = 'Median-- {}'.format(np.round(bank_df['score']).median(), 2))

ax.set_xlabel(dict_rus['score'],fontsize = 15)
ax.set_ylabel('Density',fontsize = 15)
plt.title('Feature distribution density <<{}>>'.format(dict_rus['score'],fontsize = 15))
plt.legend()
plt.show()

"""# 'age'"""

fig, ax = plt.subplots(1, figsize = (18, 6))
plt.subplot(1,2,1)
ax = sns.boxplot(y = bank_df['age']);
ax.set_xlabel(dict_rus['age'], fontsize = 12)
ax.set_ylabel('Feature values \n <<{}>>'.format(dict_rus['age']), fontsize = 12)
plt.title('Boxplot \n For the feature  <<{}>>'.format(dict_rus['age']))
plt.subplot(1,2,2)
ax = sns.distplot(x = bank_df[bank_df['age']< 100].age,
                  bins = 10,
                  kde = False);
ax.axvline(np.percentile(bank_df['age'].dropna(), 1),
           color = 'red',
           label = 'percentile  1 -- {}'.format(np.round(np.percentile(bank_df['age'].dropna(), 1), 2)))
ax.axvline(np.percentile(bank_df['age'].dropna(), 5),
           color = 'blue',
           label = 'percentile  5 -- {}'.format(np.round(np.percentile(bank_df['age'].dropna(), 5), 2)))
ax.axvline(np.percentile(bank_df['age'].dropna(), 1),
           color = 'yellow',
           label = 'percentile  95 -- {}'.format(np.round(np.percentile(bank_df['age'].dropna(), 95), 2)))
ax.axvline(np.percentile(bank_df['score'].dropna(), 99),
           color = 'green',
           label = 'percentile  99 -- {}'.format(np.round(np.percentile(bank_df['age'].dropna(), 99), 2)))

ax.axvline(calc_boxplot(bank_df['age'])[0],
           color = 'orange',
           label = 'Lower wh. -- {}'.format(np.round(calc_boxplot(bank_df['age'])[0], 2))
           )
ax.axvline(calc_boxplot(bank_df['age'])[1],
           color ='red',
           label = 'Upper wh -- {}'.format(np.round(calc_boxplot(bank_df['age'])[1], 2))
           )
ax.axvline(bank_df['age'].mean(),
           color ='black',
           label = 'Mean-- {}'.format(np.round(bank_df['age']).mean(), 2))
ax.axvline(bank_df['age'].median(),
           color ='brown',
           label = 'Median-- {}'.format(np.round(bank_df['age']).median(), 2))

ax.set_xlabel(dict_rus['age'],fontsize = 15)
ax.set_ylabel('Density',fontsize = 15)
plt.title('Feature distribution density <<{}>>'.format(dict_rus['age'],fontsize = 15))
plt.legend()
plt.show()

"""# 'balance'"""

fig, ax = plt.subplots(1, figsize = (18, 6))
plt.subplot(1,2,1)
ax = sns.boxplot(y = bank_df['balance']);
ax.set_xlabel(dict_rus['balance'], fontsize = 12)
ax.set_ylabel('Feature values \n <<{}>>'.format(dict_rus['balance']), fontsize = 12)
plt.title('Boxplot \n For the feature  <<{}>>'.format(dict_rus['balance']))
plt.subplot(1,2,2)
ax = sns.distplot(x = bank_df[bank_df['balance'] < 100000].balance,
                  bins = 10,
                  kde = False);
ax.axvline(np.percentile(bank_df['balance'].dropna(), 1),
           color = 'red',
           label = 'percentile 1 -- {}'.format(np.round(np.percentile(bank_df['balance'].dropna(), 1), 2)))
ax.axvline(np.percentile(bank_df['balance'].dropna(), 5),
           color = 'blue',
           label = 'percentile 5 -- {}'.format(np.round(np.percentile(bank_df['balance'].dropna(), 5), 2)))
ax.axvline(np.percentile(bank_df['balance'].dropna(), 1),
           color = 'yellow',
           label = 'percentile 95 -- {}'.format(np.round(np.percentile(bank_df['balance'].dropna(), 95), 2)))
ax.axvline(np.percentile(bank_df['balance'].dropna(), 99),
           color = 'green',
           label = 'percentile 99 -- {}'.format(np.round(np.percentile(bank_df['balance'].dropna(), 99), 2)))

ax.axvline(calc_boxplot(bank_df['balance'])[0],
           color = 'orange',
           label = 'Lower wh. -- {}'.format(np.round(calc_boxplot(bank_df['balance'])[0], 2))
           )
ax.axvline(calc_boxplot(bank_df['balance'])[1],
           color ='red',
           label = 'Upper wh  -- {}'.format(np.round(calc_boxplot(bank_df['balance'])[1], 2))
           )
ax.axvline(bank_df['balance'].mean(),
           color ='black',
           label = 'Mean-- {}'.format(np.round(bank_df['balance']).mean(), 2))
ax.axvline(bank_df['balance'].median(),
           color ='brown',
           label = 'Median-- {}'.format(np.round(bank_df['balance']).median(), 2))

ax.set_xlabel(dict_rus['balance'],fontsize = 15)
ax.set_ylabel('Density',fontsize = 15)
plt.title('Feature distribution density  <<{}>>'.format(dict_rus['balance'],fontsize = 15))
plt.legend()
plt.show()

"""# 'estimated_salary'"""

fig, ax = plt.subplots(1, figsize = (18, 6))
plt.subplot(1,2,1)
ax = sns.boxplot(y = bank_df['estimated_salary']);
ax.set_xlabel(dict_rus['estimated_salary'], fontsize = 12)
ax.set_ylabel('Feature values \n <<{}>>'.format(dict_rus['estimated_salary']), fontsize = 12)
plt.title('Boxplot \n For the feature  <<{}>>'.format(dict_rus['estimated_salary']))
plt.subplot(1,2,2)
ax = sns.distplot(x = bank_df[bank_df['estimated_salary'] < 100000].estimated_salary,
                  bins = 10,
                  kde = False);
ax.axvline(np.percentile(bank_df['estimated_salary'].dropna(), 1),
           color = 'red',
           label = 'percentile 1 -- {}'.format(np.round(np.percentile(bank_df['estimated_salary'].dropna(), 1), 2)))
ax.axvline(np.percentile(bank_df['estimated_salary'].dropna(), 5),
           color = 'blue',
           label = 'percentile 5 -- {}'.format(np.round(np.percentile(bank_df['estimated_salary'].dropna(), 5), 2)))
ax.axvline(np.percentile(bank_df['balance'].dropna(), 1),
           color = 'yellow',
           label = 'percentile 95 -- {}'.format(np.round(np.percentile(bank_df['estimated_salary'].dropna(), 95), 2)))
ax.axvline(np.percentile(bank_df['estimated_salary'].dropna(), 99),
           color = 'green',
           label = 'percentile 99 -- {}'.format(np.round(np.percentile(bank_df['estimated_salary'].dropna(), 99), 2)))

ax.axvline(calc_boxplot(bank_df['estimated_salary'])[0],
           color = 'orange',
           label = 'Lower wh. -- {}'.format(np.round(calc_boxplot(bank_df['estimated_salary'])[0], 2))
           )
ax.axvline(calc_boxplot(bank_df['estimated_salary'])[1],
           color ='red',
           label = 'Upper wh -- {}'.format(np.round(calc_boxplot(bank_df['estimated_salary'])[1], 2))
           )
ax.axvline(bank_df['estimated_salary'].mean(),
           color ='black',
           label = 'Mean-- {}'.format(np.round(bank_df['estimated_salary']).mean(), 2))
ax.axvline(bank_df['estimated_salary'].median(),
           color ='brown',
           label = 'Median-- {}'.format(np.round(bank_df['estimated_salary']).median(), 2))

ax.set_xlabel(dict_rus['estimated_salary'],fontsize = 15)
ax.set_ylabel('Density',fontsize = 15)
plt.title('Feature distribution density  <<{}>>'.format(dict_rus['estimated_salary'],fontsize = 15))
plt.legend()
plt.show()

"""#Summary table: sample mean, median, mode, quartiles (0.01, 0.05, 0.95, 0.99), lower and upper whisker values for each feature.

"""

fig, ax = plt.subplots(4, figsize = (18, 27))

for index, col in enumerate(var_cont):
  plt.subplot(4, 2, 2*index + 1)
  ax = sns.boxplot(data = bank_df , y = col, color= 'pink')
  ax.set_xlabel(dict_rus[col], fontsize = 15)

  ax.set_ylabel('Feature values  <<{}>>'.format(dict_rus[col]),fontsize = 15)
  plt.title('Boxplot for the feature  <<{}>>'.format(dict_rus[col], fontsize = 15))

  plt.subplot(4, 2, 2*index + 2 )
  ax = sns.distplot(bank_df[col],color= 'yellow');
  ax.set_xlabel(dict_rus[col],fontsize = 15)
  ax.set_ylabel('Density',fontsize = 15)
  plt.title('Feature distribution density <<{}>>'.format(dict_rus[col],fontsize = 15))
  ax.axvline(np.percentile(bank_df[col].dropna(), 1),
                    color = 'red',
                    label = 'percentile 1 -- {}'.format(np.round(np.percentile(bank_df[col].dropna(), 1), 2)))
  ax.axvline(np.percentile(bank_df[col].dropna(), 5),
                    color = 'blue',
                    label = 'percentile 5 -- {}'.format(np.round(np.percentile(bank_df[col].dropna(), 5), 2)))
  ax.axvline(np.percentile(bank_df[col].dropna(), 1),
                    color = 'yellow',
                    label = 'percentile 95 -- {}'.format(np.round(np.percentile(bank_df[col].dropna(), 95), 2)))
  ax.axvline(np.percentile(bank_df[col].dropna(), 99),
                    color = 'green',
                    label = 'percentile 99 -- {}'.format(np.round(np.percentile(bank_df[col].dropna(), 99), 2)))
  ax.axvline(calc_boxplot(bank_df[col])[0],
                    color = 'orange',
                    label = 'Lower wh. -- {}'.format(np.round(calc_boxplot(bank_df[col])[0], 2)))
  ax.axvline(calc_boxplot(bank_df[col])[1],
                    color ='red',
                    label = 'Upper wh -- {}'.format(np.round(calc_boxplot(bank_df[col])[1], 2)))
  ax.axvline(bank_df[col].mean(),
                    color ='black',
                    label = 'Mean-- {}'.format(np.round(bank_df[col]).mean(), 2))
  ax.axvline(bank_df[col].median(),
                    color ='brown',
                    label = 'Median-- {}'.format(np.round(bank_df[col]).median(), 2))

  plt.legend()
plt.show()

"""#Overlaying features:

Combining density distribution and vertical lines for statistics on one plot.
"""

# gender

sns.histplot(data=bank_df, x = 'score' , hue='gender', bins=80);
plt.title("Histogram");

"""# For each categorical feature:

- mode


"""

bank_df[var_typ].mode()

"""- A bar chart reflecting the number of objects for each value of the feature is plotted.
- Each column on the chart is accompanied by a label indicating the number of elements with that value.
"""

sns.countplot(x = 'products',  hue = 'gender', data = bank_df)

sns.countplot( x = 'objects',  hue = 'gender', data = bank_df)

sns.countplot( x = 'gender',  hue = 'objects', data = bank_df)

sns.violinplot(x= 'products', y = 'objects', hue = 'gender',  data = bank_df);

sns.swarmplot(x = 'products', y ='objects',
              hue="gender",
              data=bank_df)

var_typ = ['products','objects','gender' ]

dict_typ = {'products':'Number of bank products',
            'objects':'Number of owned properties',
            'gender': 'Gender'}

fig, axes = plt.subplots(3, sharey=True, figsize=(20,8))
i=0
for i, col in enumerate(var_typ):
    plt.subplot(1,3,i+1)
    sns.countplot(x=col, data = bank_df)
    plt.title("Histogram  \n  for the feature <<{}>>".format(dict_typ[col]))
    plt.xlabel(dict_typ[col], fontsize = 12)
    plt.ylabel('Amount ', fontsize = 12)